import os
import logging
from config.experiment_settings import *
from modules.utils import *
from modules.ax_integration import AxIntegration
from modules.file_monitor import TxtHandler, JSONHandler
from watchdog.observers import Observer

def tester(seed, config, target_file_name, sobol):
    observer_txt=None
    observer_json=None
    wrong_limits=False

    try:
        #Step 0: Configure logging
        log_level=log(config=config)
        logger = logging.getLogger(__name__)
        logger.info("----------Step 0: Log configuration----------")
        logger.info(f'Log levels: \n LOG_LEVEL:{log_level}')  

        # Step 1: Load Tester experiment configuration
        logger.info("----------Step 1: Loading configuration...----------")
        logger.info(f'TESTER_EXP: {TESTER_EXP}, PARAM_MATCHING: {PARAM_MATCHING}, MINIMIZE_ERROR: {MINIMIZE_ERROR}')
        
        # Step 2: Load necessary paths
        logger.info("----------Step 2: Loading necessary paths...----------")
        required_paths = [config.CHANNEL_SIM_LIMITS_FILE, config.EXP_LIMITS_PATH, config.TARGET_VALUES_FILE] 
        required_folders = [config.INDI_RESULTS, config.TRIAL_TXT, config.TRIAL_JSON, 
                            config.EXP_RESULTS_PATH, config.DATA_EXP, config.ERROR_EXP, config.LOG_PATH,
                            config.EXP_PLOT_PATH, config.SPECTRA_PLOTS, config.ERROR_PLOTS, config.FIG_PATH, config.GLOBAL_DATAS]
        if not os.path.exists(config.CHANNEL_SIM_LIMITS_FILE):
            logger.warning(f'¡{config.CHANNEL_SIM_LIMITS_FILE} not found! Creating with channel_test_limits()...')
            channel_test_limits(config=config)
        logger.info("The folders and paths required for this experiment are as follows:")
        logger.info(f'Required_paths:\n {required_paths}')
        logger.info(f'Required_folders:\n {required_folders}')
        
        # Step 3: Creation of necessary folders
        logger.info("----------Step 3: Creating necessary folders...----------")
        create_folders(required_folders)
        csv_path=os.path.join(config.GLOBAL_DATAS, 'Experiment_results.csv')
        
        # Step 4: Check channel_limits
        logger.info("----------Step 4: Checking if the edited limits are valid----------")
        if not validate_experiment_limits(config.CHANNEL_SIM_LIMITS_FILE, config.EXP_LIMITS_PATH):
            logger.error("Experiment limits are invalid. Check experiment_limits.json")
            wrong_limits=True
            raise ValueError("Invalid experiment limits")
        else:
            params=load_ax_params(config.EXP_LIMITS_PATH)
            wrong_limits=False
        
        # Step 5: Initialize Ax and monitors
        logger.info("----------Step 5: Initializing Ax and monitors----------")
        target_values=search_and_load_target_values(target_file_name, TV_JSONs, TV_CSVs)
        ax = AxIntegration(
            params=params,
            num_trials_sobol=sobol,
            seed=seed
        )
        
        # Set up observer for TxtHandler
        txt_handler=TxtHandler()
        observer_txt = Observer()
        observer_txt.schedule(
            txt_handler,
            path=config.TRIAL_TXT, 
            recursive=False
        )
        observer_txt.start()
        logger.info("Observer started (monitoring TXTs folder)")
        
        # Set up observer for JSONHandler
        json_handler=JSONHandler()
        observer_json=Observer()
        observer_json.schedule(
            json_handler,
            path=config.TRIAL_JSON,
            recursive=False
        )
        observer_json.start()
        logger.info("Observer started (monitoring JSONs folder)")
        
        # Main loop
        trials = []
        ax_objs=[]
        logger.info("Starting experiment cycle...")

        try:
            for trial in range(sobol + NUM_TRIALS_FB):
                logger.info(f'--- Trial {trial+1} ---')
            
                # Step 6: Ax proposes parameters
                parameters, trial_idx=ax.get_next_trial()
                logger.info(f'Parámeters generated by Ax: {parameters}')
            
                # Step 7: Save parameters in Txt
                txt_indi = os.path.join(config.TRIAL_TXT, f'Result_trial_{trial_idx}.txt')
                save_indi_trials(trial_idx, txt_indi, parameters, None)
                logger.debug(f'Trial {trial_idx} saved in TXT: {txt_indi}')
            
                # Actively wait for the handler to detect the file
                txt_handler.new_txt_event.wait()
                txt_handler.new_txt_event.clear()
            
                # Step 8: Convert TXT to JSON
                logger.debug(f'Converting Txt to JSON')
                json_data, trial_num = txt_to_json(txt_handler.latest_txt_path)
                if json_data:
                    json_path = os.path.join(config.TRIAL_JSON, f'Result_trial_{trial_idx}.json')
                    with open (json_path, 'w') as f:
                        f.write(json_data)
                    logger.info(f'JSON generated: {json_path}')
                else:
                    logger.error("Error in TXT to JSON conversion")
            
                # Actively wait for the handler to detect the file
                json_handler.new_json_event.wait()
                json_handler.new_json_event.clear()
            
                # Step 9: Calculate error
                error=calculate_error(json_handler.latest_json_path, target_values)
                ax_obj=float(error["Variable_error"][0])
                logger.info(f"Error calculated for Trial {trial_num}: {error}")
            
                # Step 10: Save datas
                ax_objs.append(ax_obj)
                trials.append(trial_idx)
            
                txt_total=os.path.join(config.DATA_EXP, f'DB_Experiment_{config.DATA_UTC}.txt')
                error_file=os.path.join(config.ERROR_EXP, f'Error_Experiment_{config.DATA_UTC}.txt')
            
                save_indi_trials(trial_idx, txt_indi, parameters, ax_obj)
                save_total_trials(trial_idx, txt_total, parameters, ax_objs[-1] if ax_objs else 0)
                save_error(trial_idx, error_file, ax_objs[-1] if ax_objs else 0)

                write_csv(file_path=csv_path, config=config, trial=trial_idx, channels=parameters, loss=ax_obj, shape=target_file_name)
            
                # Step 11: Pass the error to Ax
                ax.complete_trial({"error": (ax_obj, 0.0)})
        except Exception as e:
            logger.error(f'Error in Trial {trial_idx+1}: {str(e)}')
    except KeyboardInterrupt:
        logger.warning('Stopping the experiment...')
    finally:
        if wrong_limits==False:
            best_parameters, _ = ax.get_best_parameters()
            logger.info(f'Best founded parameters: {best_parameters}')
            lw_error_file=os.path.join(config.GLOBAL_DATAS, f'Lowest_errors.txt')
            lowest_error_file(lw_error_file, target_file_name, seed, error_file)
            if observer_txt:
                observer_txt.stop()
                observer_txt.join()
            if observer_json:
                observer_json.stop()
                observer_json.join()
            
            save_path=os.path.join(config.ERROR_PLOTS, f'Error_plot_{config.DATA_UTC}.png')
            plot_errors_FB(trials=trials, error=ax_objs, sobol_trials=sobol, best_parameters=best_parameters, save_path=save_path, fecha_utc=config.DATA_UTC, num_trials=NUM_TRIALS_FB, error_file=error_file, config=config)
            plot_parameter_comparison(trial_json_dir=config.TRIAL_JSON, target_values=target_values, save_path=config.SPECTRA_PLOTS)
            
            logger.info("Visualizations successfully generated")
        else:
            logger.info("No experiment until limits changed")
